#ifndef CHESS_BOARD_HEADER
#define CHESS_BOARD_HEADER

#include <array>
#include "definitions.hpp"

using namespace std;

// Data needed to go back by one move
class History{
public:
	// The move applied
	int move;

	// en Passant square index (if active) before the move
	int enPas;

	// Status of fifty move rule. Keeping track of number of moves without capture before the move was made
	int fiftycount;

	// Castling moves possible for the configuration before the move was made
	int castling;

	 // Unique identifier for the configuration before the move was made
	long long int position; 
};


class ChessBoard{
public:
	array<int,BOARD_SIZE> configuration;

 	// Storing the pawn configurations as a 64-bit number for white, black and both
	array<long long int, 3> pawns; 

 	// Position of the king's
	array<int, 2> kings;

	// Current side to move
	int side;

	// en Passant square index (if active)
	int enPas;

	// Status of fifty move rule. Keeping track of number of moves without capture
	int fiftycount;

 	// Number of half moves in current search
	int ply;

 	// Number of half moves in total search
	int historyply; 

	// Castling moves possible for the configuration
	int castling;

 	// Unique identifier for the configuration
	long long int position; 

 	// Number of pieces on the board
	array<int, 13> pieceNum;

 	// Number of pieces on the board by color
	array<int, 2> bigPiece; // All pieces except pawns for White, Black
	array<int, 2> majorPiece; // Rooks and Queens
	array<int, 2> minorPiece; // Bishop and Knights
	array<int, 2> score; // scores for each color

	// Stores the history of the entire game
	array<History,MAXGAMEMOVES> history;

	// Stores the list of pieces of the current configuration. In the worst possible case two rooks and 8 pawns can be substituting rooks
	array<array<int, 13>, 10> piece_list;

	ChessBoard();
	~ChessBoard();
	void reset_board();
	void print_board();
	void update_material_score();
	bool square_attacked(const int sq, const int side);
}; 


class PieceHashKeys{
public: 
	array<array<long long int, 13>, 120> piece_keys;
	long long int side_key;
	array<long long int,16> castling_keys;

	void init_Hash_Keys();
};

class MoveClass{
public:
	int move;
	int score; // For move ordering
};

class MoveList{
public:
	array<MoveClass, MAXPOSMOVES> moves;
	int count; // Number of moves
	MoveList(){
		count = 0;
	}

	~MoveList(){
		count = 0;
	}
};

long long int generate_position_key(const ChessBoard &my_board, PieceHashKeys &keys);
int parse_configuration(ChessBoard &my_board, char* cur_configuration, PieceHashKeys &keys);

// Move Generation Functions come here
void print_move_list(const MoveList &my_move_list);

<<<<<<< .mine
void add_quiet_move(const ChessBoard &my_board, int move_data, MoveList &my_move_list);
void add_capture_move(const ChessBoard &my_board, int move_data, MoveList &my_move_list);
void add_enpassant_move(const ChessBoard &my_board, int move_data, MoveList &my_move_list);

void add_pawn_capture_w(const ChessBoard &my_board, const int from, const int to, const int cap, MoveList &my_move_list);
void add_pawn_move_w(const ChessBoard &my_board, const int from, const int to, MoveList &my_move_list);
void add_pawn_capture_b(const ChessBoard &my_board, const int from, const int to, const int cap, MoveList &my_move_list);
void add_pawn_move_b(const ChessBoard &my_board, const int from, const int to, MoveList &my_move_list);

void generate_moves(const ChessBoard &my_board, MoveList &my_move_list);

#endif //CHESS_BOARD_HEADER
